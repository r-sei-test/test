# Bandit security scan with native SARIF, hardened & pinned
# -----------------------------------------------------------------------------
# What this does:
#  1) Checkout (read-only, no persisted creds)
#  2) Set up Python (pip cache only if dep files exist)
#  3) Install Bandit with SARIF formatter (bandit[sarif])
#  4) Run Bandit → SARIF
#  5) Upload SARIF to GitHub Code Scanning + keep an artifact copy

name: Bandit

on:
  push:
    branches: [ "main" ]
    paths:
      - "**/*.py"
      - "pyproject.toml"
      - "poetry.lock"
      - "requirements*.txt"
      - "setup.cfg"
      - ".bandit"
      - "bandit.yaml"
      - "bandit.yml"
      - ".github/workflows/bandit.yml"
  pull_request:
    branches: [ "main" ]
    paths:
      - "**/*.py"
      - "pyproject.toml"
      - "poetry.lock"
      - "requirements*.txt"
      - "setup.cfg"
      - ".bandit"
      - "bandit.yaml"
      - "bandit.yml"
      - ".github/workflows/bandit.yml"
  schedule:
    - cron: "37 14 * * 1"
  workflow_dispatch:

# Cancel superseded runs to avoid CI pile-ups
concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

# Default-deny at workflow level
permissions:
  contents: read

jobs:
  bandit:
    name: Bandit scan → SARIF
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    # Least privilege: only what we need in this job
    permissions:
      contents: read           # checkout
      security-events: write   # upload SARIF to Code Scanning
      actions: read            # needed in private repos for upload-sarif

    env:
      BANDIT_VERSION: "1.8.6"        # >=1.7.8 supports SARIF (via extra)
      SARIF_OUT: "reports/bandit.sarif"

    steps:
      # Harden runner egress. Start in audit; switch to block + allowlist when stable.
      - name: Harden runner (egress audit)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          # For block mode, uncomment and trim:
          # egress-policy: block
          # allowed-endpoints: >
          #   pypi.org:443
          #   files.pythonhosted.org:443
          #   api.github.com:443
          #   uploads.github.com:443
          #   objects.githubusercontent.com:443
          #   github.com:443

      # Checkout with no persisted creds
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
          fetch-depth: 0

      # Detect dependency files to decide whether to enable pip cache
      - name: Detect dependency files for pip cache
        id: deps
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          files=( **/requirements*.txt **/pyproject.toml **/poetry.lock **/setup.cfg )
          if [ ${#files[@]} -gt 0 ]; then
            echo "have_deps=true" >> "$GITHUB_OUTPUT"
            {
              echo "paths<<EOF"
              printf '%s\n' "${files[@]}"
              echo "EOF"
            } >> "$GITHUB_OUTPUT"
            printf 'Dependency files detected:\n'; printf '  - %s\n' "${files[@]}"
          else
            echo "have_deps=false" >> "$GITHUB_OUTPUT"
            echo "No dependency files; Python will be set up without pip cache."
          fi

      # Setup Python with pip cache (only when deps exist)
      - name: Set up Python (with pip cache)
        if: ${{ steps.deps.outputs.have_deps == 'true' }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: ${{ steps.deps.outputs.paths }}

      # Fallback: setup Python without pip cache
      - name: Set up Python (no cache)
        if: ${{ steps.deps.outputs.have_deps != 'true' }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.12"

      # Install Bandit with SARIF formatter support
      # Docs: bandit >=1.7.8 provides SARIF via the 'sarif' extra: pip install bandit[sarif]
      - name: Install Bandit (pinned, SARIF-enabled)
        shell: bash
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          # Include toml extra if you keep config in pyproject.toml
          python -m pip install "bandit[sarif,toml]==${BANDIT_VERSION}"
          bandit --version
        timeout-minutes: 3

      # Run Bandit with native SARIF output
      - name: Run Bandit → SARIF
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p "$(dirname "${SARIF_OUT}")"
          bandit -r . \
            --format sarif \
            --output "${SARIF_OUT}" \
            --severity-level all \
            --confidence-level all \
            --exit-zero \
            --quiet \
            --exclude .git,.venv,venv,.tox,site-packages,dist,build
        timeout-minutes: 5

      # Publish SARIF to Code Scanning (Security tab)
      - name: Upload SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@3c3833e0f8c1c83d449a7478aa59c036a9165498 # v3.29.11
        with:
          sarif_file: ${{ env.SARIF_OUT }}
          category: bandit

      # Keep an auditable copy with explicit retention
      - name: Upload SARIF as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: bandit-sarif
          path: ${{ env.SARIF_OUT }}
          retention-days: 14
