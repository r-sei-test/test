name: Bandit

on:
  push:
    branches: [ "main" ]
    paths:
      - "**/*.py"
      - "pyproject.toml"
      - "poetry.lock"
      - "requirements*.txt"
      - "setup.cfg"
      - ".bandit"
      - "bandit.yaml"
      - "bandit.yml"
      - ".github/workflows/bandit.yml"
  pull_request:
    branches: [ "main" ]
    paths:
      - "**/*.py"
      - "pyproject.toml"
      - "poetry.lock"
      - "requirements*.txt"
      - "setup.cfg"
      - ".bandit"
      - "bandit.yaml"
      - "bandit.yml"
      - ".github/workflows/bandit.yml"
  schedule:
    - cron: "37 14 * * 1"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  bandit:
    name: Bandit scan → SARIF
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write
      actions: read

    env:
      BANDIT_VERSION: "1.8.6"
      SARIF_OUT: "reports/bandit.sarif"
      BANDIT_JSON: "reports/bandit.json"

    steps:
      - name: Harden the runner (Audit outbound egress)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Detect dependency files for pip cache
        id: deps
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          files=( **/requirements*.txt **/pyproject.toml **/poetry.lock **/setup.cfg )
          if [ ${#files[@]} -gt 0 ]; then
            echo "have_deps=true" >> "$GITHUB_OUTPUT"
            {
              echo "paths<<EOF"
              printf '%s\n' "${files[@]}"
              echo "EOF"
            } >> "$GITHUB_OUTPUT"
          else
            echo "have_deps=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up Python (with pip cache)
        if: ${{ steps.deps.outputs.have_deps == 'true' }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: ${{ steps.deps.outputs.paths }}

      - name: Set up Python (no cache)
        if: ${{ steps.deps.outputs.have_deps != 'true' }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.12"

      - name: Install Bandit (pinned)
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          python -m pip install "bandit[toml]==${BANDIT_VERSION}"
          bandit --version
        timeout-minutes: 3

      # FIX: Bandit can't output SARIF. Emit JSON instead.
      - name: Run Bandit and write JSON
        run: |
          set -euxo pipefail
          mkdir -p "$(dirname "${BANDIT_JSON}")"
          bandit -r . \
            --format json \
            --output "${BANDIT_JSON}" \
            --severity-level all \
            --confidence-level all \
            --exit-zero \
            --quiet \
            --exclude .git,.venv,venv,.tox,site-packages,dist,build
        timeout-minutes: 5

      # Convert Bandit JSON → SARIF 2.1.0
      - name: Convert Bandit JSON to SARIF
        run: |
          python - <<'PY'
          import json, sys, os, pathlib, hashlib
          bandit_json = os.environ.get("BANDIT_JSON", "reports/bandit.json")
          sarif_out   = os.environ.get("SARIF_OUT", "reports/bandit.sarif")
          data = {}
          if os.path.exists(bandit_json):
            with open(bandit_json, "r", encoding="utf-8") as f:
              try:
                data = json.load(f)
              except Exception:
                data = {}
          results = data.get("results", [])
          sev_to_level = {"HIGH":"error","MEDIUM":"warning","LOW":"note"}
          rules = {}
          sarif_results = []
          for it in results:
            test_id = it.get("test_id","B000")
            test_name = it.get("test_name","bandit-rule")
            msg = it.get("issue_text","")
            path = it.get("filename","")
            line = int(it.get("line_number", 1) or 1)
            sev  = (it.get("issue_severity","LOW") or "LOW").upper()
            conf = (it.get("issue_confidence","LOW") or "LOW").upper()
            more = it.get("more_info","")
            code = it.get("code","")
            # add rule once
            if test_id not in rules:
              rules[test_id] = {
                "id": test_id,
                "name": test_name,
                "shortDescription": {"text": msg[:120]},
                "helpUri": more or None
              }
            # simple fingerprint
            fp_src = f"{test_id}|{path}|{line}|{hashlib.sha1(code.encode('utf-8','ignore')).hexdigest()}"
            sarif_results.append({
              "ruleId": test_id,
              "level": sev_to_level.get(sev, "warning"),
              "message": {"text": msg},
              "locations": [{
                "physicalLocation": {
                  "artifactLocation": {"uri": path, "uriBaseId": "PROJECT_ROOT"},
                  "region": {"startLine": line}
                }
              }],
              "properties": {
                "banditSeverity": sev,
                "banditConfidence": conf,
                "testName": test_name
              },
              "fingerprints": { "banditFingerprint": hashlib.sha1(fp_src.encode()).hexdigest() }
            })
          sarif = {
            "version": "2.1.0",
            "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
            "runs": [{
              "tool": {
                "driver": {
                  "name": "Bandit",
                  "informationUri": "https://pypi.org/project/bandit/",
                  "rules": [r for r in rules.values() if r]
                }
              },
              "results": sarif_results
            }]
          }
          pathlib.Path(os.path.dirname(sarif_out)).mkdir(parents=True, exist_ok=True)
          with open(sarif_out, "w", encoding="utf-8") as f:
            json.dump(sarif, f, indent=2)
          print(f"Wrote SARIF with {len(sarif_results)} results, {len(rules)} rules")
          PY

      - name: Upload SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@3c3833e0f8c1c83d449a7478aa59c036a9165498 # v3.29.11
        with:
          sarif_file: ${{ env.SARIF_OUT }}
          category: bandit

      - name: Upload SARIF as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: bandit-sarif
          path: ${{ env.SARIF_OUT }}
          retention-days: 14
