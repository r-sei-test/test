name: SonarCloud analysis

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

jobs:
  Analysis:
    runs-on: ubuntu-24.04
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      - name: Set up Python (pinned)
        uses: actions/setup-python@7f4fc3e22c37d6ff65e88745f38bd3157c663f7c # v4.9.1
        with:
          python-version: "3.12"

      - name: Prepare reports dir
        run: mkdir -p reports

      # Generate a compile_commands.json that matches the current workspace paths.
      # In a real project, replace this with your actual build that emits the file
      # (e.g., CMake with -DCMAKE_EXPORT_COMPILE_COMMANDS=ON or bear/intercept-build).
      - name: Build & emit compile_commands.json (demo)
        run: |
          set -eux
          gcc --version
          # Ensure the C file exists (remove this guard if not needed)
          test -f main.c
          # Create a proper compilation command (produces an object file)
          cat > compile_commands.json <<'JSON'
          [
            {
              "directory": "__DIR__",
              "command": "gcc -std=c17 -I. -O2 -g -c main.c -o main.o",
              "file": "main.c"
            }
          ]
          JSON
          # Patch directory to the absolute workspace path
          sed -i "s#__DIR__#${PWD}#g" compile_commands.json

          # Optional: actually compile (not required for analysis, but useful)
          gcc -std=c17 -I. -O2 -g -c main.c -o main.o


      # Assemble Sonar args dynamically so we only enable CFamily when C files exist
      - name: Compose Sonar args
        id: sonar_args
        run: |
          ARGS="-Dsonar.sarifReportPaths=reports/trivy.sarif,reports/semgrep.sarif"
          if git ls-files '*.c' | grep -q .; then
            ARGS="$ARGS -Dsonar.cfamily.compile-commands=compile_commands.json"
          fi
          echo "args=$ARGS" >> "$GITHUB_OUTPUT"

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@4006f663ecaf1f8093e8e4abb9227f6041f52216
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # picked up automatically as sonar.token
        with:
          projectBaseDir: .
          args: ${{ steps.sonar_args.outputs.args }}
