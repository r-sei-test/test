name: SonarCloud

on:
  push:
    branches: [main]
    paths:
      - '**/*.c'
      - 'sonar-project.properties'
      - '.github/workflows/sonarcloud.yml'
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**/*.c'
      - 'sonar-project.properties'
      - '.github/workflows/sonarcloud.yml'

# Default-deny at the workflow level
permissions:
  contents: read

# Cancel superseded runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build-and-scan:
    name: Build, analyze, export SARIF
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    # Least privilege for this job; elevate only what it needs
    permissions:
      contents: read
      security-events: write   # needed because we push SARIF in this job

    env:
      BW_OUT: bw-out

    steps:
      # Harden network egress (audit mode; switch to block + allowlist once stable)
      - name: Harden runner egress
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          # allowed-endpoints: >
          #   api.github.com
          #   sonarcloud.io
          #   cdn.download.sonarsource.com

      - name: Checkout (no persisted creds)
        uses: actions/checkout@<sha-for-v4> # pin to v4 commit SHA
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Ensure main.c exists
        run: test -f main.c

      # Install Sonar build wrapper (pin to commit SHA)
      - name: Install Build Wrapper
        uses: SonarSource/sonarqube-scan-action/install-build-wrapper@<sha-for-v5>
        env:
          SONAR_HOST_URL: https://sonarcloud.io

      - name: Build (wrapped)
        run: |
          set -eux
          mkdir -p build
          build-wrapper-linux-x86-64 --out-dir "${BW_OUT}" \
            gcc -std=c17 -I. -O2 -g -c main.c -o build/main.o

      - name: Verify compile_commands.json exists
        run: |
          set -eux
          ls -l "${BW_OUT}"
          test -s "${BW_OUT}/compile_commands.json"

      # Run the scan (pin to commit SHA)
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@<sha-for-v5>
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          args: >
            --define sonar.cfamily.compile-commands=${{ env.BW_OUT }}/compile_commands.json

      # Wait for CE task, fetch issues (PR uses pullRequest, push uses branch),
      # generate SARIF, then upload to Code Scanning. This step intentionally
      # runs after the scan in the same job so we can keep permissions scoped here.
      - name: Export SonarCloud issues to SARIF and upload
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          python3 - <<'PY'
          import base64, json, os, sys, time, urllib.parse, urllib.request, pathlib, subprocess

          host = os.environ["SONAR_HOST_URL"].rstrip("/")
          token = os.environ["SONAR_TOKEN"]

          def fetch_json(url):
            req = urllib.request.Request(url)
            b64 = base64.b64encode(f"{token}:".encode("utf-8")).decode("ascii")
            req.add_header("Authorization", f"Basic {b64}")
            try:
              with urllib.request.urlopen(req, timeout=30) as r:
                return json.loads(r.read().decode("utf-8"))
            except Exception as e:
              print(f"HTTP error for URL: {url}", file=sys.stderr)
              raise

          # 1) Read ceTaskId from scanner output
          taskfile = ".scannerwork/report-task.txt"
          if not os.path.exists(taskfile):
            print("report-task.txt not found", file=sys.stderr); sys.exit(1)
          ce_task_id = ""
          ce_task_url = ""
          with open(taskfile, "r", encoding="utf-8") as f:
            for line in f:
              line = line.strip()
              if line.startswith("ceTaskId="):
                ce_task_id = line.split("=",1)[1]
              elif line.startswith("ceTaskUrl="):
                ce_task_url = line.split("=",1)[1]
          if not ce_task_id and ce_task_url:
            q = urllib.parse.urlparse(ce_task_url).query
            ce_task_id = dict(urllib.parse.parse_qsl(q)).get("id","")
          if not ce_task_id:
            print("Missing ceTaskId in report-task.txt", file=sys.stderr)
            with open(taskfile,"r",encoding="utf-8") as f: print(f.read(), file=sys.stderr)
            sys.exit(1)

          # 2) Poll CE until SUCCESS/FAILED (timeout ~5min)
          ce_url = f"{host}/api/ce/task?id={urllib.parse.quote(ce_task_id)}"
          for _ in range(60):
            data = fetch_json(ce_url)
            status = (data.get("task") or {}).get("status")
            print("CE status:", status or "<empty>")
            if status == "SUCCESS": break
            if status == "FAILED":
              print(json.dumps(data, indent=2)); sys.exit(1)
            time.sleep(5)
          else:
            print("Compute Engine did not reach SUCCESS within timeout", file=sys.stderr); sys.exit(1)

          # 3) Project key/org from sonar-project.properties
          sp = "sonar-project.properties"
          if not os.path.exists(sp):
            print("sonar-project.properties missing", file=sys.stderr); sys.exit(1)
          proj = org = ""
          with open(sp, "r", encoding="utf-8") as f:
            for line in f:
              line=line.strip()
              if line.startswith("sonar.projectKey="): proj = line.split("=",1)[1]
              elif line.startswith("sonar.organization="): org = line.split("=",1)[1]
          if not proj or not org:
            print("Missing sonar.projectKey or sonar.organization", file=sys.stderr); sys.exit(1)

          # 4) Selector: PR vs branch
          event = os.environ.get("GITHUB_EVENT_NAME","")
          if event == "pull_request":
            selector_key = "pullRequest"
            selector_val = os.environ.get("PR_NUMBER","")
          else:
            selector_key = "branch"
            selector_val = os.environ.get("GITHUB_REF_NAME","main")

          # 5) Page SonarCloud issues (include organization)
          def issues_page(page:int):
            qs = {
              "organization": org,
              "componentKeys": proj,
              "ps": "500",
              "p": str(page),
              "additionalFields": "_all",
            }
            qs[selector_key] = selector_val
            url = f"{host}/api/issues/search?{urllib.parse.urlencode(qs)}"
            return fetch_json(url)

          issues = []
          page = 1
          total = None
          while True:
            data = issues_page(page)
            batch = data.get("issues", [])
            issues.extend(batch)
            total = data.get("total", len(issues)) if total is None else total
            if len(issues) >= total or not batch:
              break
            page += 1

          # 6) Build SARIF
          sev2lvl = {"BLOCKER":"error","CRITICAL":"error","MAJOR":"warning","MINOR":"note","INFO":"note"}
          rules = {}
          results = []
          for iss in issues:
            rid = iss.get("rule","unknown")
            if rid not in rules:
              rules[rid] = {
                "id": rid,
                "name": rid,
                "shortDescription": {"text": iss.get("message","")},
                "helpUri": f"{host}/coding_rules?open={urllib.parse.quote(rid)}"
              }
            comp = iss.get("component","")
            path = comp.split(":",1)[1] if ":" in comp else comp
            line = iss.get("line", 1)
            lvl  = sev2lvl.get((iss.get("severity") or "").upper(), "note")
            msg  = iss.get("message","")
            results.append({
              "ruleId": rid,
              "level": lvl,
              "message": {"text": msg},
              "locations": [{
                "physicalLocation": {
                  "artifactLocation": {"uri": path.replace("\\","/")},
                  "region": {"startLine": line if isinstance(line,int) else 1}
                }
              }],
              "properties": {
                "sonarSeverity": iss.get("severity"),
                "type": iss.get("type"),
                "effort": iss.get("effort"),
                "status": iss.get("status"),
                "key": iss.get("key")
              }
            })

          sarif = {
            "version": "2.1.0",
            "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
            "runs": [{
              "tool": { "driver": {
                "name": "SonarCloud",
                "informationUri": "https://sonarcloud.io",
                "rules": list(rules.values())
              }},
              "results": results
            }]
          }
          pathlib.Path("reports").mkdir(parents=True, exist_ok=True)
          out = pathlib.Path("reports/sonarcloud-findings.sarif")
          out.write_text(json.dumps(sarif, indent=2), encoding="utf-8")
          print(f"Wrote SARIF with {len(results)} results, {len(rules)} rules")

          # 7) Upload to Code Scanning
          subprocess.run([
            "bash", "-lc",
            "python3 - <<'UP'\n"
            "import json,sys,subprocess\n"
            "p=['github/codeql-action/upload-sarif@<sha-for-v3>']\n"
            "UP\n"
          ])  # no-op marker to highlight pinning in the file

          PY

      - name: Upload SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@<sha-for-v3> # pin to v3 commit SHA
        with:
          sarif_file: reports/sonarcloud-findings.sarif
          category: sonarcloud
