name: SonarCloud

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  security-events: write

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    env:
      BW_OUT: bw-out

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure main.c exists
        run: test -f main.c

      - name: Install Build Wrapper
        uses: SonarSource/sonarqube-scan-action/install-build-wrapper@v5
        env:
          SONAR_HOST_URL: https://sonarcloud.io

      - name: Build (wrapped)
        run: |
          mkdir -p build
          build-wrapper-linux-x86-64 --out-dir "${BW_OUT}" \
            gcc -std=c17 -I. -O2 -g -c main.c -o build/main.o

      - name: Verify compile_commands.json exists
        run: |
          ls -l "${BW_OUT}"
          test -s "${BW_OUT}/compile_commands.json"

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          args: >
            --define sonar.cfamily.compile-commands=${{ env.BW_OUT }}/compile_commands.json

      - name: Export SonarCloud issues to SARIF
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          python3 - <<'PY'
          import json, os, sys, time, urllib.parse, urllib.request, pathlib

          host = os.environ["SONAR_HOST_URL"].rstrip("/")
          token = os.environ["SONAR_TOKEN"]

          # 1) Read ceTaskId from scanner output
          taskfile = ".scannerwork/report-task.txt"
          if not os.path.exists(taskfile):
            print("report-task.txt not found", file=sys.stderr); sys.exit(1)
          ce_task_id = ""
          with open(taskfile, "r", encoding="utf-8") as f:
            for line in f:
              if line.startswith("ceTaskId="):
                ce_task_id = line.strip().split("=",1)[1]
                break
          if not ce_task_id:
            # fallback: parse ceTaskUrl
            with open(taskfile, "r", encoding="utf-8") as f:
              for line in f:
                if line.startswith("ceTaskUrl="):
                  url = line.strip().split("=",1)[1]
                  q = urllib.parse.urlparse(url).query
                  ce_task_id = dict(urllib.parse.parse_qsl(q)).get("id","")
                  break
          if not ce_task_id:
            print("Missing ceTaskId in report-task.txt", file=sys.stderr); sys.exit(1)

          # 2) Poll CE until SUCCESS/FAILED
          def fetch_json(url):
            pwman = urllib.request.HTTPPasswordMgrWithDefaultRealm()
            pwman.add_password(None, host, token, "")
            opener = urllib.request.build_opener(urllib.request.HTTPBasicAuthHandler(pwman))
            with opener.open(url) as r:
              return json.loads(r.read().decode("utf-8"))

          ce_url = f"{host}/api/ce/task?id={urllib.parse.quote(ce_task_id)}"
          for _ in range(60):
            data = fetch_json(ce_url)
            status = (data.get("task") or {}).get("status")
            print("CE status:", status or "<empty>")
            if status == "SUCCESS":
              break
            if status == "FAILED":
              print(json.dumps(data, indent=2)); sys.exit(1)
            time.sleep(5)

          # 3) Project key/org from sonar-project.properties
          sp = "sonar-project.properties"
          if not os.path.exists(sp):
            print("sonar-project.properties missing", file=sys.stderr); sys.exit(1)
          proj, org = "", ""
          with open(sp, "r", encoding="utf-8") as f:
            for line in f:
              if line.startswith("sonar.projectKey="):
                proj = line.strip().split("=",1)[1]
              elif line.startswith("sonar.organization="):
                org = line.strip().split("=",1)[1]
          if not proj:
            print("sonar.projectKey missing", file=sys.stderr); sys.exit(1)

          # 4) Selector: PR vs branch
          event = os.environ.get("GITHUB_EVENT_NAME","")
          if event == "pull_request":
            selector_key = "pullRequest"
            selector_val = os.environ.get("PR_NUMBER","")
          else:
            selector_key = "branch"
            selector_val = os.environ.get("GITHUB_REF_NAME","main")

          # 5) Page issues
          def fetch_issues(page):
            qs = {
              "componentKeys": proj,
              "ps": "500",
              "p": str(page),
              "additionalFields": "_all",
            }
            qs[selector_key] = selector_val
            url = f"{host}/api/issues/search?{urllib.parse.urlencode(qs)}"
            return fetch_json(url)

          issues = []
          page = 1
          total = None
          while True:
            data = fetch_issues(page)
            issues.extend(data.get("issues",[]))
            total = data.get("total", len(issues)) if total is None else total
            if len(issues) >= total or not data.get("issues"):
              break
            page += 1

          # 6) Build SARIF
          sev2lvl = {"BLOCKER":"error","CRITICAL":"error","MAJOR":"warning","MINOR":"note","INFO":"note"}
          rules = {}
          results = []
          for iss in issues:
            rid = iss.get("rule","unknown")
            if rid not in rules:
              rules[rid] = {
                "id": rid,
                "name": rid,
                "shortDescription": {"text": iss.get("message","")},
                "helpUri": f"{host}/coding_rules?open={urllib.parse.quote(rid)}"
              }
            comp = iss.get("component","")
            path = comp.split(":",1)[1] if ":" in comp else comp
            line = iss.get("line", 1)
            lvl  = sev2lvl.get((iss.get("severity") or "").upper(), "note")
            msg  = iss.get("message","")
            results.append({
              "ruleId": rid,
              "level": lvl,
              "message": {"text": msg},
              "locations": [{
                "physicalLocation": {
                  "artifactLocation": {"uri": path.replace("\\","/")},
                  "region": {"startLine": line if isinstance(line,int) else 1}
                }
              }],
              "properties": {
                "sonarSeverity": iss.get("severity"),
                "type": iss.get("type"),
                "effort": iss.get("effort"),
                "status": iss.get("status"),
                "key": iss.get("key")
              }
            })

          sarif = {
            "version": "2.1.0",
            "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
            "runs": [{
              "tool": { "driver": {
                "name": "SonarCloud",
                "informationUri": "https://sonarcloud.io",
                "rules": list(rules.values())
              }},
              "results": results
            }]
          }
          pathlib.Path("reports").mkdir(parents=True, exist_ok=True)
          with open("reports/sonarcloud-findings.sarif","w",encoding="utf-8") as f:
            json.dump(sarif, f, indent=2)
          print(f"Wrote SARIF with {len(results)} results")
          PY

      - name: Upload SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/sonarcloud-findings.sarif
          category: sonarcloud
