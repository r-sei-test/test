name: SonarCloud

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  security-events: write

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    env:
      BW_OUT: bw-out

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Ensure main.c exists
        run: test -f main.c

      - name: Install Build Wrapper
        uses: SonarSource/sonarqube-scan-action/install-build-wrapper@v5
        env:
          SONAR_HOST_URL: https://sonarcloud.io

      - name: Build (wrapped)
        run: |
          mkdir -p build
          build-wrapper-linux-x86-64 --out-dir ${BW_OUT} \
            gcc -std=c17 -I. -O2 -g -c main.c -o build/main.o

      - name: Verify compile_commands.json exists
        run: |
          ls -l ${BW_OUT}
          test -s ${BW_OUT}/compile_commands.json

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          args: >
            --define sonar.cfamily.compile-commands=${{ env.BW_OUT }}/compile_commands.json

      - name: Wait for analysis and export SARIF
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        run: |
          set -euo pipefail
          mkdir -p reports
          test -s .scannerwork/report-task.txt
          CE_TASK_URL="$(grep '^ceTaskUrl=' .scannerwork/report-task.txt | cut -d'=' -f2)"
          for i in $(seq 1 60); do
            STATUS="$(curl -fsSL -u "$SONAR_TOKEN:" "$CE_TASK_URL" | jq -r '.task.status')"
            echo "Compute Engine status: $STATUS"
            [ "$STATUS" = "SUCCESS" ] && break
            [ "$STATUS" = "FAILED" ] && { echo "SonarCloud CE task failed"; exit 1; }
            sleep 5
          done
          SONAR_PROJECT_KEY="$(grep -E '^sonar\.projectKey=' sonar-project.properties | cut -d'=' -f2)"
          SONAR_ORG="$(grep -E '^sonar\.organization=' sonar-project.properties | cut -d'=' -f2)"
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME:-main}}"
          ALL_ISSUES=$(mktemp); : > "$ALL_ISSUES"
          PAGE=1; PAGE_SIZE=500
          while :; do
            URL="${SONAR_HOST_URL%/}/api/issues/search?componentKeys=${SONAR_PROJECT_KEY}&branch=${BRANCH}&ps=${PAGE_SIZE}&p=${PAGE}&additionalFields=_all"
            JSON="$(curl -fsSL -u "$SONAR_TOKEN:" "$URL")"
            echo "$JSON" | jq -c '.issues[]' >> "$ALL_ISSUES" || true
            TOTAL=$(echo "$JSON" | jq -r '.total // 0')
            COUNT=$(wc -l < "$ALL_ISSUES" | tr -d ' ')
            [ "$COUNT" -ge "$TOTAL" ] && break
            PAGE=$((PAGE+1))
          done
          cat > reports/sonarcloud-findings.sarif <<'JSON'
          {
            "version": "2.1.0",
            "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
            "runs": [{
              "tool": { "driver": { "name": "SonarCloud", "informationUri": "https://sonarcloud.io", "rules": [] } },
              "results": []
            }]
          }
          JSON
          jq -s '
            def level(s):
              if s=="BLOCKER" or s=="CRITICAL" then "error"
              elif s=="MAJOR" then "warning"
              else "note" end;
            def ruleId: .rule;
            def filePath: ( .component | split(":") | if length>1 then .[1] else .[0] end );
            {
              rules: ( [ .[] | { id: ruleId, name: ruleId } ] | unique ),
              results: [ .[] | {
                ruleId: ruleId,
                level: level(.severity),
                message: { text: .message },
                locations: [ { physicalLocation: {
                  artifactLocation: { uri: (filePath | gsub("\\\\"; "/")) },
                  region: { startLine: (if (.line|type)=="number" then .line else 1 end) }
                } } ],
                properties: {
                  sonarSeverity: .severity, type: .type, effort: .effort, status: .status, key: .key
                }
              } ]
            }
          ' "$ALL_ISSUES" > reports/_tmp.json
          jq '
            .runs[0].tool.driver.rules = (input.rules | unique_by(.id)) |
            .runs[0].results = input.results
          ' reports/sonarcloud-findings.sarif reports/_tmp.json > reports/_final.sarif
          mv reports/_final.sarif reports/sonarcloud-findings.sarif
          rm -f reports/_tmp.json "$ALL_ISSUES"
          echo "Wrote reports/sonarcloud-findings.sarif"

      - name: Upload SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/sonarcloud-findings.sarif
          category: sonarcloud
