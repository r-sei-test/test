name: SonarCloud

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  security-events: write

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    env:
      BW_OUT: bw-out

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure main.c exists
        run: test -f main.c

      - name: Install Build Wrapper
        uses: SonarSource/sonarqube-scan-action/install-build-wrapper@v5
        env:
          SONAR_HOST_URL: https://sonarcloud.io

      - name: Build (wrapped)
        run: |
          mkdir -p build
          build-wrapper-linux-x86-64 --out-dir ${BW_OUT} \
            gcc -std=c17 -I. -O2 -g -c main.c -o build/main.o

      - name: Verify compile_commands.json exists
        run: |
          ls -l ${BW_OUT}
          test -s ${BW_OUT}/compile_commands.json

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          args: >
            --define sonar.cfamily.compile-commands=${{ env.BW_OUT }}/compile_commands.json

      - name: Wait for analysis, export SARIF, upload to Code Scanning
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        run: |
          set -euo pipefail
          command -v jq >/dev/null
          mkdir -p reports

          # 1) Read CE task id from scanner output
          test -s .scannerwork/report-task.txt
          CE_TASK_ID="$(grep -E '^ceTaskId=' .scannerwork/report-task.txt | cut -d'=' -f2 || true)"
          if [ -z "${CE_TASK_ID:-}" ]; then
            CE_TASK_URL_RAW="$(grep -E '^ceTaskUrl=' .scannerwork/report-task.txt | cut -d'=' -f2 || true)"
            CE_TASK_ID="$(printf '%s' "$CE_TASK_URL_RAW" | sed -n 's/.*[?&]id=\([^&]*\).*/\1/p')"
          fi
          test -n "${CE_TASK_ID:-}" || { echo "Missing ceTaskId"; cat .scannerwork/report-task.txt; exit 1; }

          # 2) Poll CE until SUCCESS/FAILED (timeout ~5min)
          CE_TASK_URL="${SONAR_HOST_URL%/}/api/ce/task?id=${CE_TASK_ID}"
          for _ in $(seq 1 60); do
            BODY="$(curl -sS -u "$SONAR_TOKEN:" "$CE_TASK_URL")"
            STATUS="$(echo "$BODY" | jq -r '.task.status // empty')"
            echo "CE status: ${STATUS:-<empty>}"
            [ "$STATUS" = "SUCCESS" ] && break
            [ "$STATUS" = "FAILED" ] && { echo "$BODY" | jq .; exit 1; }
            sleep 5
          done

          # 3) Determine selector (PR vs branch)
          SONAR_PROJECT_KEY="$(grep -E '^sonar\.projectKey=' sonar-project.properties | cut -d'=' -f2)"
          : "${SONAR_PROJECT_KEY:?sonar.projectKey missing}"
          if [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
            SELECTOR_KIND="pullRequest"
            SELECTOR_VALUE="${{ github.event.pull_request.number }}"
          else
            SELECTOR_KIND="branch"
            SELECTOR_VALUE="${GITHUB_REF_NAME:-main}"
          fi
          echo "Selector: ${SELECTOR_KIND}=${SELECTOR_VALUE}"

          # 4) Page issues into NDJSON
          ALL_ISSUES="$(mktemp)"; : > "$ALL_ISSUES"
          PAGE=1; PAGE_SIZE=500
          while :; do
            RESP="$(mktemp)"
            CODE="$(curl -sS -u "$SONAR_TOKEN:" -G "${SONAR_HOST_URL%/}/api/issues/search" \
              --data-urlencode "componentKeys=${SONAR_PROJECT_KEY}" \
              --data-urlencode "${SELECTOR_KIND}=${SELECTOR_VALUE}" \
              --data-urlencode "ps=${PAGE_SIZE}" \
              --data-urlencode "p=${PAGE}" \
              --data-urlencode "additionalFields=_all" \
              -w "%{http_code}" -o "$RESP")"
            [ "$CODE" = "200" ] || { echo "HTTP $CODE from /api/issues/search"; cat "$RESP"; exit 1; }
            jq -c '.issues[]' "$RESP" >> "$ALL_ISSUES" || true
            TOTAL="$(jq -r '.total // 0' "$RESP")"
            COUNT="$(wc -l < "$ALL_ISSUES" | tr -d ' ')"
            rm -f "$RESP"
            [ "$COUNT" -ge "$TOTAL" ] && break
            PAGE=$((PAGE+1))
          done

          # 5) Build SARIF via Python (robust to payload quirks)
          python3 - <<'PY'
import json, os, sys
from pathlib import Path

issues = []
tmp = os.environ.get("ALL_ISSUES_PATH")
# Pass the path from shell to Python safely
if not tmp:
    tmp = os.popen('echo "$ALL_ISSUES"').read().strip()
if tmp and os.path.exists(tmp):
    with open(tmp, "r", encoding="utf-8") as f:
        for line in f:
            line=line.strip()
            if not line: continue
            try:
                issues.append(json.loads(line))
            except Exception:
                # Skip malformed lines defensively
                pass

# Map severities to SARIF levels
sev2lvl = {"BLOCKER":"error","CRITICAL":"error","MAJOR":"warning","MINOR":"note","INFO":"note"}

rules = {}
results = []
for iss in issues:
    rid = iss.get("rule","unknown")
    rules.setdefault(rid, {
        "id": rid,
        "name": rid,
        "shortDescription": {"text": iss.get("message","")},
        "helpUri": "https://sonarcloud.io/coding_rules?open=" + rid
    })
    comp = iss.get("component","")
    path = comp.split(":",1)[1] if ":" in comp else comp
    line = iss.get("line", 1)
    lvl  = sev2lvl.get((iss.get("severity") or "").upper(), "note")
    msg  = iss.get("message","")
    results.append({
        "ruleId": rid,
        "level": lvl,
        "message": {"text": msg},
        "locations": [{
            "physicalLocation": {
                "artifactLocation": {"uri": path.replace("\\","/")},
                "region": {"startLine": line if isinstance(line,int) else 1}
            }
        }],
        "properties": {
            "sonarSeverity": iss.get("severity"),
            "type": iss.get("type"),
            "effort": iss.get("effort"),
            "status": iss.get("status"),
            "key": iss.get("key")
        }
    })

sarif = {
  "version": "2.1.0",
  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
  "runs": [{
    "tool": { "driver": {
      "name": "SonarCloud",
      "informationUri": "https://sonarcloud.io",
      "rules": list(rules.values())
    }},
    "results": results
  }]
}

Path("reports").mkdir(parents=True, exist_ok=True)
with open("reports/sonarcloud-findings.sarif","w",encoding="utf-8") as f:
    json.dump(sarif, f, indent=2)
print(f"Wrote SARIF with {len(results)} results, {len(rules)} rules")
PY
          # Expose NDJSON path to Python
          export ALL_ISSUES_PATH="$ALL_ISSUES"

      - name: Upload SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/sonarcloud-findings.sarif
          category: sonarcloud
