# Semgrep (hardened, pinned, least-privilege) — PRs, pushes, manual, and nightly
# =============================================================================
# What this does:
#   1) Job "semgrep-scan": installs a pinned Semgrep CLI and runs a scan that
#      always writes SARIF (semgrep.sarif). It chooses "semgrep ci" if an
#      App token is present, else falls back to "semgrep scan --config p/ci".
#   2) Job "upload-sarif": uploads SARIF to GitHub Code Scanning and stores an artifact.
#
# Why the structure:
#   • Separate upload job → only that job gets 'security-events: write' (least privilege).
#   • SHA-pinned actions; explicit runner; concurrency & timeouts; egress hardening.
#   • No container 'latest' tag: we pin Semgrep by version via pip (reproducible).

name: Semgrep

on:
  workflow_dispatch: {}
  pull_request:
    branches: [ "main" ]                 # tune for your model
    paths:
      - "**/*"
      - ".github/workflows/semgrep.yml"
  push:
    branches: [ "main" ]                 # cover direct commits
    paths:
      - "**/*"
      - ".github/workflows/semgrep.yml"
  schedule:
    - cron: "16 6 * * *"                 # daily at 06:16 UTC (adjust as needed)

# Cancel superseded runs on the same ref/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

# Default-deny at the workflow level
permissions:
  contents: read

jobs:
  # ─────────────────────────────── Job 1: Scan (no security-events) ───────────────────────────────
  semgrep-scan:
    name: Semgrep scan → SARIF
    runs-on: ubuntu-24.04                   # explicit runner
    timeout-minutes: 20
    permissions:
      contents: read                        # checkout only
    env:
      # If present, we'll use 'semgrep ci' (App-based policies and triage).
      SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
      # Pin the CLI for reproducibility (see PyPI for latest versions).
      SEMGREP_VERSION: "1.134.0"
      SARIF_FILE: "semgrep.sarif"

    outputs:
      has_sarif: ${{ steps.check.outputs.has_sarif }}

    steps:
      # Harden egress. Start with audit; later switch to block + allowlist (GitHub endpoints).
      - name: Harden runner (egress audit)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
          # When stable, prefer:
          # egress-policy: block
          # allowed-endpoints: >
          #   api.github.com:443
          #   uploads.github.com:443
          #   objects.githubusercontent.com:443
          #   github.com:443
          #   pypi.org:443 files.pythonhosted.org:443  # for pinned pip install

      - name: Checkout repository (no persisted creds)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
          fetch-depth: 0

      # Install a pinned Python and Semgrep CLI (no 'latest'; fully versioned)
      - name: Set up Python (pinned)
        uses: actions/setup-python@7f4fc3e22c37d6ff65e88745f38bd3157c663f7c # v4.9.1
        with:
          python-version: "3.12"

      # Optional: cache pip downloads to speed up subsequent runs (safe, version-keyed)
      - name: Cache pip
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-semgrep-${{ env.SEMGREP_VERSION }}

      - name: Install Semgrep CLI (pinned)
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          python -m pip install "semgrep==${SEMGREP_VERSION}"

      # Compute a diff baseline for PRs so Semgrep focuses on changed code.
      # For pushes (or if merge-base is absent), skip baseline.
      - name: Determine baseline commit (PRs only)
        id: base
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git fetch --no-tags origin "${{ github.event.pull_request.base.ref }}":"refs/remotes/origin/${{ github.event.pull_request.base.ref }}" || true
            mb="$(git merge-base "HEAD" "refs/remotes/origin/${{ github.event.pull_request.base.ref }}")" || mb=""
            echo "baseline=${mb}" >> "$GITHUB_OUTPUT"
          else
            echo "baseline=" >> "$GITHUB_OUTPUT"
          fi

      # Run Semgrep. If SEMGREP_APP_TOKEN is set → 'semgrep ci' (App policies).
      # Otherwise → CE mode with curated registry rules 'p/ci'.
      # Always produce SARIF for GitHub Code Scanning ingestion.
      # By default, semgrep returns 0 on findings; to fail, add --error or enforce blocking policies. (docs)
      - name: Run Semgrep (CI or CE) → SARIF
        shell: bash
        env:
          SEMGREP_BASELINE_COMMIT: ${{ steps.base.outputs.baseline }}
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "${SARIF_FILE}")"
          if [[ -n "${SEMGREP_APP_TOKEN:-}" ]]; then
            # App mode: use organization policies
            semgrep ci --sarif --output "${SARIF_FILE}"
          else
            # CE mode: use public registry rules aimed at CI
            semgrep scan --config p/ci --sarif --output "${SARIF_FILE}"
          fi

      - name: Check SARIF exists
        id: check
        shell: bash
        run: |
          set -euo pipefail
          if [[ -s "${SARIF_FILE}" ]]; then
            echo "has_sarif=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_sarif=false" >> "$GITHUB_OUTPUT"
          fi

      # Keep an auditable copy with defined retention
      - name: Upload SARIF as artifact
        if: always() && steps.check.outputs.has_sarif == 'true'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: semgrep-sarif
          path: ${{ env.SARIF_FILE }}
          retention-days: 14

  # ─────────────────────────────── Job 2: Upload (scoped permissions) ───────────────────────────────
  upload-sarif:
    name: Upload SARIF to Code Scanning
    needs: semgrep-scan
    if: ${{ needs.semgrep-scan.outputs.has_sarif == 'true' }}
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    permissions:
      contents: read
      security-events: write              # only this job can write to Code Scanning
      actions: read                       # helpful for status in private repos

    steps:
      - name: Harden runner (egress audit)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Download SARIF artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: semgrep-sarif
          path: .

      - name: Upload SARIF to GitHub Security Dashboard
        uses: github/codeql-action/upload-sarif@3c3833e0f8c1c83d449a7478aa59c036a9165498 # v3.29.11
        with:
          sarif_file: semgrep.sarif
          category: semgrep
