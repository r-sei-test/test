# Gitleaks secret scanning (native SARIF) with hardening and best practices
# =============================================================================
# What this workflow does (in order):
#   1) Checks out your repository with read-only permissions and no persisted credentials.
#   2) Runs Gitleaks (pinned to a commit SHA) to scan for hard-coded secrets.
#   3) Writes a SARIF report to the workspace root (relative path).
#   4) Uploads the SARIF to GitHub Code Scanning if the file exists.
#
# Key security & reliability patterns:
#   - Default-deny permissions at the workflow level (read-only by default).
#   - Least privilege in the job (add security-events: write only for SARIF upload).
#   - SHA-pinned third-party actions (reproducible, tamper-resistant).
#   - Concurrency to cancel superseded runs.
#   - Timeouts to cap spend and fail fast.
#   - Hardened network egress with StepSecurity.
#   - Scoped checkout credentials.
#   - Conditional upload: the SARIF uploader runs only if the file is present.

name: gitleaks

on:
  pull_request:
  push:
  schedule:
    - cron: "0 4 * * *"   # daily at 04:00 
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  scan:

    name: Gitleaks scan -> Code Scanning
    runs-on: ubuntu-24.04                 # Pin runner for reproducibility
    timeout-minutes: 20                   # Upper bound for this job

    # Least-privilege job scopes:
    permissions:
      contents: read
      security-events: write
      actions: read

    # Keep paths relative to the workspace; no /github/... anywhere.
    env:
      REPORT_PATH: gitleaks.sarif

    steps:
      # Harden egress. Start in audit mode to learn endpoints. Once stable, change to:
      #   egress-policy: block
      # and allowlist only what you need (api.github.com, uploads.github.com, etc.).
      - name: Harden runner (egress audit)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      # Checkout with no persisted creds (we don’t push in this job)
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
          fetch-depth: 0  # full history (useful if you later scan history)

      # Run Gitleaks.
      # Notes:
      #  - Gitleaks exits non-zero if leaks are found. We keep the job alive with
      #    `continue-on-error: true` so the SARIF upload can still run.
      #  - We write the report to a relative path at repo root (./gitleaks.sarif),
      #    which the container sees under /github/workspace/gitleaks.sarif.
      #  - If you maintain a baseline/allowlist, commit `.gitleaks.toml`
      #    and uncomment `config-path` below.
      - name: Run Gitleaks
        id: gitleaks
        continue-on-error: true
        uses: gitleaks/gitleaks-action@ff98106e4c7b2bc287b24eaf42907196329070c7 # v2.3.9
        with:
          args: >-
            detect
            --source .
            --redact
            --no-banner
            --verbose
            --report-format sarif
            --report-path "${{ env.REPORT_PATH }}"
          # config-path: .gitleaks.toml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # optional; used by some features

      # Upload SARIF to Code Scanning (Security tab).
      # This step runs if the SARIF file exists and is non-empty.
      #   - If Gitleaks produces no report file (some builds do this when there are zero findings),
      #     then nothing is uploaded. This is expected.
      #   - If Gitleaks produces an “empty” SARIF (file exists with zero results),
      #     it will be uploaded and Code Scanning will show no alerts for this run.
      - name: Upload SARIF to Code Scanning
        if: always() && hashFiles('gitleaks.sarif') != ''
        uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3 # v3.30.3
        with:
          sarif_file: ${{ env.REPORT_PATH }}
          category: gitleaks
