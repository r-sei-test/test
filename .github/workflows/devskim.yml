# DevSkim (hardened, pinned, least-privilege) — PRs, pushes, manual, weekly
# =============================================================================
# What this workflow does (at a glance):
#   1) Job "devskim-scan": runs Microsoft DevSkim against the repo and writes SARIF
#      (devskim-results.sarif). It then uploads the SARIF as a build artifact.
#   2) Job "upload-sarif": downloads that SARIF artifact and uploads it to GitHub
#      Code Scanning (Security tab) under category "devskim".
#
# Why this structure (best practices applied):
#   • Default-deny permissions at workflow scope; only the uploader job can write security events.
#   • SHA-pinned third-party actions → reproducible and tamper-resistant.
#   • Explicit runner (ubuntu-24.04), concurrency cancelation, and timeouts.
#   • Egress hardening: start in 'audit'; later flip to 'block' with a tight allowlist.
#   • Checkout without persisted creds (no pushes in this workflow).
#
# Maintenance tips:
#   • Keep SHAs current via Dependabot (github-actions ecosystem). Review before merging.
#   • Narrow the 'paths' filters to reduce noise/cost.
#   • If you want to fail the build on findings, remove softening (this action already exits non-zero on issues);
#     you can retain the two-job design so uploads still occur.

name: DevSkim

on:
  # Scan proposed changes (safe for forks: secrets aren’t exposed)
  pull_request:
    branches: [ "main" ]                             # ← tune to your branching model
    paths:
      - "**/*"                                       # ← narrow to your code dirs to cut CI minutes
      - ".github/workflows/devskim.yml"

  # Cover direct commits to main
  push:
    branches: [ "main" ]
    paths:
      - "**/*"
      - ".github/workflows/devskim.yml"

  # Manual trigger for testing or ad-hoc scans
  workflow_dispatch: {}

  # Optional weekly drift check
  schedule:
    - cron: "42 23 * * 2"                            # Tuesdays 23:42 UTC

# Cancel superseded runs on the same ref/PR (prevents CI pile-ups)
concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

# Default-deny at workflow level (read-only). Jobs elevate minimally.
permissions:
  contents: read

jobs:
  # ───────────────────────────────────── Job 1: Scan ─────────────────────────────────────
  devskim-scan:
    name: DevSkim scan → SARIF
    runs-on: ubuntu-24.04                             # explicit runner for reproducibility
    timeout-minutes: 15                               # cap runtime; fail fast on hangs
    permissions:
      contents: read                                  # checkout only

    steps:
      # Harden outbound network. Start in 'audit' to learn endpoints.
      # After a few clean runs, switch to:
      #   egress-policy: block
      #   allowed-endpoints: >
      #     api.github.com:443
      #     uploads.github.com:443
      #     objects.githubusercontent.com:443
      #     github.com:443
      - name: Harden the runner (egress audit)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      # Checkout with no persisted creds (we don’t push in this workflow)
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
          fetch-depth: 0

      # Run DevSkim. By default this action writes devskim-results.sarif in the workspace.
      # Keep this step as-is unless you need to pass additional CLI args via 'with:'.
      - name: Run DevSkim scanner
        uses: microsoft/DevSkim-Action@4b5047945a44163b94642a1cecc0d93a3f428cc6 # v1.0.16

      # Store the SARIF for auditing and for the upload job
      - name: Upload DevSkim SARIF as artifact
        if: always()                                   # upload even if findings caused a non-zero exit
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02   # v4.6.2
        with:
          name: devskim-sarif
          path: devskim-results.sarif
          retention-days: 14

  # ────────────────────────────────── Job 2: Upload ──────────────────────────────────
  upload-sarif:
    name: Upload DevSkim SARIF to Code Scanning
    needs: devskim-scan
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    # Least-privilege: only this job can write to the Security tab
    permissions:
      contents: read
      security-events: write
      actions: read                                   # helpful in private repos for status resolution

    steps:
      # Harden egress here as well
      - name: Harden the runner (egress audit)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      # Pull the SARIF produced by the scan job
      - name: Download SARIF artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0   # v5.0.0
        with:
          name: devskim-sarif
          path: .

      # Upload the SARIF to the Security tab; ‘category’ keeps tools distinct in the UI
      - name: Upload DevSkim scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@3c3833e0f8c1c83d449a7478aa59c036a9165498 # v3.29.11
        with:
          sarif_file: devskim-results.sarif
          category: devskim
