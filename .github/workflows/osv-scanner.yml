name: OSV-Scanner

on:
  workflow_dispatch:
  pull_request:
  push:
  schedule:
    - cron: "18 6 * * 1" # Mondays 06:18 UTC

# Default-deny. Elevate only where needed in the job.
permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  osv:
    name: OSV full scan + SARIF upload
    runs-on: ubuntu-24.04
    timeout-minutes: 20
    permissions:
      contents: read                  # checkout
      security-events: write          # upload SARIF
      actions: read                   # helps upload in private repos

    env:
      OSV_VERSION: v2.2.2             # pin OSV-Scanner version (v2 CLI)
      SARIF_OUT: reports/osv.sarif

    steps:
      # Harden egress; start in audit mode (flip to block + allowlist later).
      - name: Harden the runner (audit egress)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      # Minimal, read-only checkout; no token persisted.
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          persist-credentials: false

      # Install Go (pinned) so we can `go install` OSV-Scanner v2 reliably.
      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: "1.23.x"
          check-latest: false

      # Install pinned OSV-Scanner v2 into ~/go/bin and add to PATH.
      - name: Install OSV-Scanner
        run: |
          echo "$HOME/go/bin" >> "$GITHUB_PATH"
          go install github.com/google/osv-scanner/v2/cmd/osv-scanner@${OSV_VERSION}
          osv-scanner --version

      # Run a recursive scan of the repo (skip .git); emit SARIF for Code Scanning.
      # continue-on-error lets us still upload SARIF even if vulnerabilities are found.
      - name: Run OSV-Scanner (v2) â†’ SARIF
        continue-on-error: true
        run: |
          mkdir -p "$(dirname "${SARIF_OUT}")"
          osv-scanner scan -r --skip-git ./ --format sarif --output "${SARIF_OUT}"

      # Upload SARIF to the Security tab
      - name: Upload SARIF to GitHub Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@3c3833e0f8c1c83d449a7478aa59c036a9165498 # v3.29.11
        with:
          sarif_file: ${{ env.SARIF_OUT }}

      # Optional: also keep the SARIF as an artifact for auditing.
      - name: Upload SARIF artifact (optional)
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: osv-scanner-sarif
          path: ${{ env.SARIF_OUT }}
          retention-days: 7
